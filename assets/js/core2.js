// Generated by CoffeeScript 1.6.3
(function() {
  var Login, Rcrtmnt, Ui, Util,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Rcrtmnt = (function() {
    function Rcrtmnt() {
      this.reloadUi = __bind(this.reloadUi, this);
      this.checkStatus = __bind(this.checkStatus, this);
    }

    Rcrtmnt.prototype.variables = {
      status: 0,
      division: 0,
      logreg: 1
    };

    Rcrtmnt.prototype.init = function() {
      var ui;
      ui = new Ui;
      ui.loggedIn();
      ui.build();
      this.bindEvents();
      return this.checkStatus();
    };

    Rcrtmnt.prototype.bindEvents = function() {
      var ui;
      ui = new Ui;
      return ui.bindEvents();
    };

    Rcrtmnt.prototype.checkStatus = function() {
      var ui,
        _this = this;
      ui = new Ui;
      return $.get('status.php', function(re) {
        if (re === 'true') {
          _this.variables.status = 1;
        } else {
          _this.variables.status = 0;
        }
        return setTimeout(function() {
          _this.checkStatus();
          return _this.reloadUi();
        }, 1000);
      });
    };

    Rcrtmnt.prototype.reloadUi = function() {
      var ui;
      ui = new Ui;
      if (this.variables.status !== 1) {
        return ui.loggedOut();
      }
    };

    return Rcrtmnt;

  })();

  Login = (function() {
    function Login() {}

    Login.prototype.submit = function(data) {
      return $.post('login.php', data, function(re) {
        var ui;
        ui = new Ui;
        if (re === 'true') {
          return ui.loggedIn();
        }
      });
    };

    return Login;

  })();

  Ui = (function() {
    function Ui() {}

    Ui.prototype.build = function() {
      return $('#wrap').fadeIn();
    };

    Ui.prototype.bindEvents = function() {
      var drop, lnkLogout, login, loginParent, regisParent, register, root, ul;
      login = $('#login');
      register = $('#register');
      loginParent = login.parent();
      regisParent = register.parent();
      loginParent.on('click', '#not-registered', function(e) {
        e.preventDefault();
        loginParent.toggleClass('back');
        return regisParent.removeClass('back').addClass('front');
      });
      regisParent.on('click', '#already-registered', function(e) {
        e.preventDefault();
        regisParent.toggleClass('back');
        return loginParent.removeClass('back');
      });
      login.on('click', '#btn-login', function(e) {
        var data, loginObj;
        e.preventDefault();
        loginObj = new Login;
        data = login.serializeArray();
        loginObj.submit(data);
        return login.find('input[type="password"]').val('');
      });
      lnkLogout = $('#lnk-logout');
      lnkLogout.on('click', function(e) {
        e.preventDefault();
        $('#content-nav').fadeOut().find('.container').html('');
        $('body').append("<div id='overlay'></div>");
        return $.post('logout.php', {}, function(re) {
          return $('#overlay').fadeOut().promise().done(function() {
            return $('#overlay').remove();
          });
        });
      });
      $('#lnk-submit').on('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        return $('#submit').toggleClass('submit-open');
      });
      ul = $('#upload').find('ul');
      drop = $('#drop');
      $('#drop').on('click', 'a', function(e) {
        e.stopPropagation();
        e.preventDefault();
        return $(this).parent().find('input').click();
      });
      $('#upload').fileupload({
        dropZone: drop,
        add: function(e, data) {
          var jqXHR, tpl, util;
          util = new Util;
          tpl = $('<li class="working"><input type="text" value="0" data-width="48" data-height="48" data-fgcolor="#0788a5" data-readOnly="1" data-bgColor="#3e4043"><p></p><span></span></li>');
          tpl.find('p').text(data.files[0].name).append('<i>' + util.formatFileSize(data.files[0].size) + '</i>');
          data.context = tpl.appendTo(ul);
          tpl.find('input').knob();
          tpl.find('span').on('click', function() {
            if (tpl.hasClass('working')) {
              jqXHR.abort();
            }
            return tpl.fadeOut(function() {
              return tpl.remove();
            });
          });
          return jqXHR = data.submit().success(function(result, textStatus, jqXHR) {
            return alert(result);
          });
        },
        progress: function(e, data) {
          var progress;
          progress = parseInt(data.loaded / data.total * 100, 10);
          return data.context.find('input').val(progress).change();
        },
        fail: function(e, data) {
          return data.context.addClass('error');
        }
      });
      $(document).on('drop dragover', function(e) {
        return e.preventDefault();
      });
      root = $('body');
      $('body').on('click', 'a', function(e) {
        var href;
        href = $.attr(this, 'href');
        root.animate({
          scrollTop: $(href).offset().top - 40
        }, 1000, function() {
          return window.location.hash = href;
        });
        e.preventDefault();
        return e.stopPropagation();
      });
      $('#content').on('click', '.toggle-advanced', function(e) {
        var btnText;
        btnText = $(this).text();
        if (btnText === 'toggle advanced') {
          $(this).text('toggle basic');
        } else {
          $(this).text('toggle advanced');
        }
        $(this).parents('.general').find('ol').slideToggle();
        $(this).parents('.task-group').find('ul.advanced').slideToggle('fast', function() {
          var href, pos;
          href = $(this).find('li').attr('id');
          pos = $(this).find('li').offset().top - 100;
          return $('body').animate({
            scrollTop: pos
          }, 1000, function() {
            return window.location.hash = href;
          });
        });
        e.stopPropagation();
        return e.preventDefault();
      });
      return $('#content').on('click', '#go-hard', function(e) {
        var btnText;
        e.preventDefault();
        btnText = $(this).text();
        if (btnText === 'Go Hard Core!') {
          $(this).text('Go Basic');
        } else {
          $(this).text('Go Hard Core!');
        }
        $('#exam-ainstructions').slideToggle();
        return $('.general').find('.toggle-advanced').slideToggle();
      });
    };

    Ui.prototype.loggedIn = function() {
      var rndForm;
      console.log('uiLoggedIn!');
      rndForm = $('.rnd-form');
      $('.rnd-form').css({
        top: rndForm.height() * -1
      });
      $('.navbar').removeClass('nav-logged-out');
      return $.get('app/exam.php', function(re) {
        var contNav, topLevelLinks;
        $('#content').html(re).fadeIn();
        $('.advanced').slideToggle();
        $('#exam-ainstructions').slideToggle();
        $('.general').find('.toggle-advanced').slideToggle();
        topLevelLinks = ["<ul>"];
        $('#content').find('article').each(function(k, v) {
          var a, atrid, b;
          atrid = $(v).attr('id');
          a = $(v).find('h1.title').text();
          b = "<li class='top-level'><a href='#" + atrid + "'>" + a + "</a></li>";
          return topLevelLinks.push(b);
        });
        topLevelLinks.push("</ul>");
        topLevelLinks.join();
        contNav = $('#content-nav');
        contNav.find('.container').html(topLevelLinks);
        return contNav.fadeIn();
      });
    };

    Ui.prototype.loggedOut = function() {
      var rndForm, rndFormMarginTop;
      console.log('uiLoggedOut!');
      rndForm = $('.rnd-form');
      rndFormMarginTop = (rndForm.height() / 2) * -1;
      $('.rnd-form').css({
        top: '50%',
        marginTop: rndFormMarginTop
      });
      $('.navbar').addClass('nav-logged-out');
      $('#content-nav').fadeOut().find('.container').html('');
      return $('#content').fadeOut().html('');
    };

    return Ui;

  })();

  Util = (function() {
    function Util() {}

    Util.prototype.formatFileSize = function(bytes) {
      if (typeof bytes !== 'number') {
        return false;
      }
      if (bytes >= 1000000000) {
        retunrn((bytes / 1000000000).toFixed(2) + ' GB');
      }
      if (bytes >= 1000000) {
        return (bytes / 1000000).toFixed(2) + ' MB';
      }
      return (bytes / 1000).toFixed(2) + ' KB';
    };

    return Util;

  })();

  $(document).ready(function() {
    var rnd;
    rnd = new Rcrtmnt();
    return rnd.init();
  });

}).call(this);
